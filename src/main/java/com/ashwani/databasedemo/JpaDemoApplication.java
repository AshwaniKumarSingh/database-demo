package com.ashwani.databasedemo;

/** Summary-
 Implementation of JPA 
 
 Step 1:
 
 Entity Class with follwoing annotation
 a) @Entity
 b) @Table , @Column in case of table name or column name differ.
 c) @Id for Primary key and  @GeneratedValue for autogenerated column
 d)@NamedQuery(name="find_all_person", query="select p from Person p")
 
 Step 2:
  for Repository JPA class
  a)Declare EntityManager and annotate it with @PersistenceContext
  b) for single object find use find function
   		entityManger.find(Person.class, id);
  c) for multiple objects use named query
  		public List<Person> findAll()
			{
				TypedQuery<Person> namedQuery = entityManger.createNamedQuery("find_all_person", Person.class);
				return namedQuery.getResultList();
			}
  		
 Step 3:
 	for insert or update use merge function
 			 entityManger.merge(person);
 			 
 Step 4: 
 		for delete operation, first use find and then call remove function
 			Person person = findById(id);
			entityManger.remove(person);;
 			
 */



import java.util.Date;
import java.util.List;

import javax.persistence.NamedQuery;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.ashwani.databasedemo.entity.Person;

import com.ashwani.databasedemo.jpa.PersonJpaRepository;

@SpringBootApplication
public class JpaDemoApplication implements CommandLineRunner {

	@Autowired
	PersonJpaRepository repository;

	private Logger logger = LoggerFactory.getLogger(this.getClass());

	public static void main(String[] args) {
		SpringApplication.run(JpaDemoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
//		logger.info("All users -->{}", dao.findAll());
//		logger.info("uSER ID 1001 -->{}", dao.findById(1001));
//		logger.info("uSER ID 1001 -->{}", dao.DeletById(1001));
//		logger.info("All users -->{}", dao.findAll());
		logger.info("Add user 2001 -->{}", repository.Insert(new Person( "GA", "USA", new Date())));
		//logger.info("Add user 2001 -->{}", dao.Insert(new Person(2001, "GA", "USA", new Date())));
		logger.info("All users -->{}", repository.findById(1002));
		
		Person person = repository.findById(1002);
		repository.Update(new Person(person.getId(),"Raka", "INdia",new Date()));
		logger.info("All users -->{}", repository.findAll());
		
		///logger.info("Add user 2001 -->{}", repository.Insert(new Person(1002, "Raja", "USA", new Date())));
	}
}
